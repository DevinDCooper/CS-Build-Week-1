{"version":3,"sources":["Game.js","App.js","registerServiceWorker.js","index.js"],"names":["Cell","this","props","x","y","className","style","left","top","width","CELL_SIZE","height","React","Component","Game","state","cells","generation","isRunning","interval","handleClick","event","elemOffset","getElementOffset","offsetX","clientX","offsetY","clientY","Math","floor","cols","rows","board","setState","makeCells","runGame","runIteration","stopGame","timeoutHandler","window","clearTimeout","handleIntervalChange","target","value","handleClear","makeEmptyBoard","handleRandom","random","HEIGHT","WIDTH","rect","boardRef","getBoundingClientRect","doc","document","documentElement","pageXOffset","clientLeft","pageYOffset","clientTop","push","newBoard","neighbors","calculateNeighbors","setTimeout","dirs","i","length","dir","y1","x1","backgroundSize","onClick","ref","n","map","cell","key","onChange","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.31a8c706.chunk.js","sourcesContent":["import React from 'react';\nimport './Game.css';\n\n\nconst CELL_SIZE = 20;\nconst WIDTH = 800;\nconst HEIGHT = 600;\n\n\nclass Cell extends React.Component {\n\n    render() {\n        const { x, y } = this.props;\n        return (\n            <div className=\"Cell\" style={{\n                left: `${CELL_SIZE * x + 1}px`,\n                top: `${CELL_SIZE * y + 1}px`,\n                width: `${CELL_SIZE - 1}px`,\n                height: `${CELL_SIZE - 1}px`,\n            }} />\n        );\n    }\n}\n\n\nclass Game extends React.Component {\n\n    constructor() {\n        super();\n        this.rows = HEIGHT / CELL_SIZE;\n        this.cols = WIDTH / CELL_SIZE;\n\n        this.board = this.makeEmptyBoard();\n    }\n\n    state = {\n        cells: [],\n        generation: 0,\n        isRunning: false,\n        interval: 100,\n    }\n\n    makeEmptyBoard() {\n        let board = [];\n        for (let y = 0; y < this.rows; y++) {\n            board[y] = [];\n            for (let x = 0; x < this.cols; x++) {\n                board[y][x] = false;\n            }\n        }\n\n        return board;\n    }\n\n    getElementOffset() {\n        const rect = this.boardRef.getBoundingClientRect();\n        const doc = document.documentElement;\n\n        return {\n            x: (rect.left + window.pageXOffset) - doc.clientLeft,\n            y: (rect.top + window.pageYOffset) - doc.clientTop,\n        };\n    }\n\n    makeCells() {\n        let cells = [];\n        for (let y = 0; y < this.rows; y++) {\n            for (let x = 0; x < this.cols; x++) {\n                if (this.board[y][x]) {\n                    cells.push({ x, y });\n                }\n            }\n        }\n\n        return cells;\n    }\n\n    handleClick = (event) => {\n\n        const elemOffset = this.getElementOffset();\n        const offsetX = event.clientX - elemOffset.x;\n        const offsetY = event.clientY - elemOffset.y;\n\n        const x = Math.floor(offsetX / CELL_SIZE);\n        const y = Math.floor(offsetY / CELL_SIZE);\n\n        if (x >= 0 && x <= this.cols && y >= 0 && y <= this.rows) {\n            this.board[y][x] = !this.board[y][x];\n        }\n\n        this.setState({ cells: this.makeCells() });\n    }\n\n    runGame = () => {\n        this.setState({ isRunning: true});\n        this.runIteration();\n    }\n\n    stopGame = () => {\n        this.setState({ isRunning: false });\n        if (this.timeoutHandler) {\n            window.clearTimeout(this.timeoutHandler);\n            this.timeoutHandler = null;\n        }\n    }\n\n    runIteration() {\n        let newBoard = this.makeEmptyBoard();\n        \n\n        for (let y = 0; y < this.rows; y++) {\n            for (let x = 0; x < this.cols; x++) {\n                let neighbors = this.calculateNeighbors(this.board, x, y);\n                if (this.board[y][x]) {\n                    if (neighbors === 2 || neighbors === 3) {\n                        newBoard[y][x] = true;\n                    } else {\n                        newBoard[y][x] = false;\n                    }\n                } else {\n                    if (!this.board[y][x] && neighbors === 3) {\n                        newBoard[y][x] = true;\n                    }\n                }\n            }\n            this.setState({\n                generation: this.state.generation += 1\n            });\n\n        }\n\n        this.board = newBoard;\n        this.setState({ cells: this.makeCells() });\n\n        this.timeoutHandler = window.setTimeout(() => {\n            this.runIteration();\n        }, this.state.interval);\n    }\n\n    /**\n     * Calculate the number of neighbors at point (x, y)\n     * @param {Array} board \n     * @param {int} x \n     * @param {int} y \n     */\n    calculateNeighbors(board, x, y) {\n        let neighbors = 0;\n        const dirs = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]];\n        for (let i = 0; i < dirs.length; i++) {\n            const dir = dirs[i];\n            let y1 = y + dir[0];\n            let x1 = x + dir[1];\n\n            if (x1 >= 0 && x1 < this.cols && y1 >= 0 && y1 < this.rows && board[y1][x1]) {\n                neighbors++;\n            }\n        }\n\n        return neighbors;\n    }\n\n    handleIntervalChange = (event) => {\n        this.setState({ interval: event.target.value });\n    }\n\n    handleClear = () => {\n        this.board = this.makeEmptyBoard();\n        this.setState({ cells: this.makeCells() , generation: this.state.generation = 0 });\n    }\n\n    handleRandom = () => {\n        for (let y = 0; y < this.rows; y++) {\n            for (let x = 0; x < this.cols; x++) {\n                this.board[y][x] = (Math.random() >= 0.5);\n            }\n        }\n\n        this.setState({ cells: this.makeCells(), generation: this.state.generation = 0 });\n    }\n\n    render() {\n        const { cells, interval, isRunning } = this.state;\n        return (\n            <div>\n                <div className =\"gen\">Generation:{this.state.generation} </div>\n                <div className=\"Board\"\n                    style={{ width: WIDTH, height: HEIGHT, backgroundSize: `${CELL_SIZE}px ${CELL_SIZE}px`}}\n                    onClick={this.handleClick}\n                    ref={(n) => { this.boardRef = n; }}>\n\n                    {cells.map(cell => (\n                        <Cell x={cell.x} y={cell.y} key={`${cell.x},${cell.y}`}/>\n                    ))}\n                </div>\n\n                <div className=\"controls\">\n                    Update every <input value={this.state.interval} onChange={this.handleIntervalChange} /> msec\n                    {isRunning ?\n                        <button className=\"button\" onClick={this.stopGame}>Stop</button> :\n                        <button className=\"button\" onClick={this.runGame}>Run</button>\n                    }\n                    <button className=\"button\" onClick={this.handleRandom}>Random</button>\n                    <button className=\"button\" onClick={this.handleClear}>Clear</button>\n\n                    <h3>Rules:</h3>\n                    <p>1. Any live cell with fewer than two live neighbours dies, as if by underpopulation.</p>\n                    <p>2. Any live cell with two or three live neighbours lives on to the next generation.</p>\n                    <p>3. Any live cell with more than three live neighbours dies, as if by overpopulation.</p>\n                    <p>4. Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.</p>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default Game;","import React, { Component } from 'react';\nimport './App.css';\nimport Game from './Game';\n\nclass App extends Component {\n\n    render() {\n\n        return (\n            <div className=\"App\">\n                <h1>Dev's Game of Life</h1>\n                <Game />\n            </div>\n        );\n    }\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Lets check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://goo.gl/SC7cgQ'\n            );\n          });\n        } else {\n          // Is not local host. Just register service worker\n          registerValidSW(swUrl);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a \"New content is\n                // available; please refresh.\" message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        if (\n          response.status === 404 ||\n          response.headers.get('content-type').indexOf('javascript') === -1\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n registerServiceWorker();"],"sourceRoot":""}